import('../../fastlane/Fastfile')

skip_docs

default_platform(:ios)
xcversion(version: '>= 13.1')

profile_type_edirock = 'ad-hoc' # Firebase
profile_type_store = 'app-store'

ios_devices_file = "#{$project_path}/build/ios_devices.txt"
apple_api_key_path = 'fastlane/credentials/app-store.json'

testers_group = 'iostesters'

platform :ios do
  desc 'Build release IPA'
  lane :build do |options|
    flutter('build ios --release --no-codesign')
  end

  desc 'Generates a provisioning profile, saving it in the current folder '
  private_lane :update_profile do |options|

    is_edirock = options[:profile_type] == profile_type_edirock
    provisioning_name_suffix = is_edirock ? 'AdHoc' : 'AppStore'

    cert(
      output_path: "#{$project_path}/ios/certificates",
    )

    sigh(
      provisioning_name: "#{$app_name} #{provisioning_name_suffix}",
      output_path: "#{$project_path}/ios/certificates",
      adhoc: is_edirock,
      force: true,
    )
  end

  desc 'Download devices IDs from Firebase'
  private_lane :download_udids do |options|
    firebase_app_distribution_get_udids(
      app: options[:app_id],
      output_file: ios_devices_file,
    )
  end

  desc 'Registers devices to the Apple Dev Portal'
  private_lane :sync_device_info do
    register_devices(
      devices_file: ios_devices_file,
    )
  end

  desc 'Generate IPA'
  private_lane :generate_ipa do |options|
    build
    update_profile(
      profile_type: options[:profile_type],
    )

    gym(
      scheme: 'Runner',
      workspace: "#{$project_path}/ios/Runner.xcworkspace",
      configuration: 'Release',
      archive_path: "#{$project_path}/build/ios/Runner.xcarchive",
      export_method: options[:profile_type],
      output_directory: "#{$project_path}/build/Runner",
      xcargs: '-allowProvisioningUpdates',
      export_xcargs: '-allowProvisioningUpdates',
    )
  end

  desc 'Distribute to iOS beta testers in TestFlight'
  lane :release_distribute do
    request_api_key
    generate_ipa(profile_type: profile_type_store)
    pilot
  end

  desc 'Distribute to iOS beta testers in Firebase'
  lane :firebase_distribute do |options|
    ENV['IS_FIREBASE_DISTRIBUTION'] = 'true'

    testers = options[:tester_email]
    groups = testers ? nil : testers_group

    request_api_key
    app_id = firebase_id()
    download_udids(app_id: app_id)
    sync_device_info
    generate_ipa(profile_type: profile_type_edirock)

    firebase_app_distribution(
      app: app_id,
      release_notes: get_changelog(),
      ipa_path: "#{$project_path}/build/Runner/Runner.ipa",
      groups: groups,
      testers: testers,
    )
  end

  private_lane :request_api_key do
    api_key_content = File.read(apple_api_key_path)
    api_key_json = JSON.parse(api_key_content)

    app_store_connect_api_key(
      key_id: api_key_json['key_id'],
      issuer_id: api_key_json['issuer_id'],
      key_content: api_key_json['key'],
      duration: api_key_json['duration'],
      in_house: api_key_json['in_house'],
    )
  end

  lane :firebase_id do
    google_services_file = "#{$project_path}/ios/Runner/GoogleService-Info.plist"
    sh("cat '#{google_services_file}' | grep ':ios:' | sed 's/^.*>\\(.*\\)<.*\$/\\1/g'").strip
  end
end
