import('../../fastlane/Fastfile')

skip_docs

default_platform(:ios)
xcodes

profile_type_edirock = 'ad-hoc' # Firebase
profile_type_store = 'app-store'

provisioning_names = {
  "#{profile_type_edirock}": 'adhoc',
  "#{profile_type_store}": 'appstore',
}

ios_devices_file = "#{$project_path}/build/ios_devices.txt"
apple_api_key_path = ENV['APP_STORE_API_KEY_PATH']
app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)

testers_group = 'iostesters'
is_ci = ENV.key?('CI')

platform :ios do
  desc 'Build release IPA'
  lane :build do |options|
    build_number_arg = ENV['APP_BUILD_NUMBER']
    build_number_arg = build_number_arg ? "--build-number=#{build_number_arg}" : ''
    flutter("build ios --release --no-codesign --config-only #{build_number_arg}")
  end

  desc 'Fetch provisioning profiles using match'
  private_lane :fetch_profile do |options|
    is_edirock = options[:profile_type] == profile_type_edirock
    type = provisioning_names[:"#{options[:profile_type]}"]
    sigh_force = is_edirock && options[:force]

    if is_ci
      setup_ci
    end

    match(
      type: type,
      readonly: false,
      force: sigh_force,
    )

    profile_mapping = Actions.lane_context[SharedValues::MATCH_PROVISIONING_PROFILE_MAPPING]
    profile_mapping[app_identifier]
  end

  desc 'Download devices IDs from Firebase'
  private_lane :download_udids do |options|
    firebase_app_distribution_get_udids(
      app: options[:app_id],
      output_file: ios_devices_file,
    )
  end

  desc 'Registers devices to the Apple Dev Portal'
  private_lane :sync_device_info do
    if File.exist?(ios_devices_file)
      register_devices(
        devices_file: ios_devices_file,
      )
    end
  end

  desc 'Generate IPA'
  private_lane :generate_ipa do |options|
    profile_name = fetch_profile(
      profile_type: options[:profile_type],
      force: options[:force_profile],
    )

    build(
      profile_type: options[:profile_type],
    )

    gym(
      scheme: 'Runner',
      configuration: 'Release',
      workspace: "#{$project_path}/ios/Runner.xcworkspace",
      archive_path: "#{$project_path}/build/ios/Runner.xcarchive",
      output_directory: "#{$project_path}/build/ios/Runner",
      export_method: options[:profile_type],
      xcargs: "IOS_BUNDLE_ID='#{app_identifier}' PROVISIONING_PROFILE_SPECIFIER='#{profile_name}'",
    )
  end

  desc 'Distribute to iOS beta testers in TestFlight'
  lane :release_distribute do
    request_api_key

    generate_ipa(
      profile_type: profile_type_store,
    )

    upload_to_testflight(
      ipa: "#{$project_path}/build/ios/Runner/Runner.ipa",
    )

    upload_to_app_store(
      submit_for_review: true,
      automatic_release: false,
      skip_binary_upload: true,
      precheck_include_in_app_purchases: false,
      force: true,
    )
  end

  desc 'Distribute to iOS beta testers in Firebase'
  lane :firebase_distribute do |options|
    ENV['IS_FIREBASE_DISTRIBUTION'] = 'true'

    testers = options[:tester_email] || ''
    groups = testers.empty? ? testers_group : nil

    request_api_key

    app_id = firebase_id()
    download_udids(app_id: app_id)
    new_devices = sync_device_info || []

    generate_ipa(
      profile_type: profile_type_edirock,
      force_profile: new_devices.any?,
    )

    firebase_app_distribution(
      app: app_id,
      release_notes: get_changelog(),
      ipa_path: "#{$project_path}/build/ios/Runner/Runner.ipa",
      groups: groups,
      testers: testers,
    )
  end

  private_lane :request_api_key do
    if apple_api_key_path and File.exist?(apple_api_key_path)
      api_key_content = File.read(apple_api_key_path)
      api_key_json = JSON.parse(api_key_content)

      app_store_connect_api_key(
        key_id: api_key_json['key_id'],
        issuer_id: api_key_json['issuer_id'],
        key_content: api_key_json['key'],
        duration: api_key_json['duration'] || 1200,
        in_house: api_key_json['in_house'] || false,
      )
    else
      IO.important 'Apple API Key not defined or not exists'
    end
  end

  lane :verify_app_store_auth do
    request_api_key
    app_store_build_number(
      live: false,
      app_identifier: app_identifier,
      initial_build_number: true
    )
  end

  lane :firebase_id do
    google_services_file = "#{$project_path}/ios/Runner/GoogleService-Info.plist"
    sh("cat '#{google_services_file}' | grep ':ios:' | sed 's/^.*>\\(.*\\)<.*\$/\\1/g'").strip
  end
end
